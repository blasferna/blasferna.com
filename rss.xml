<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Blas FernÃ¡ndez</title>
    <link>http://blasferna.com</link>
    <description>Paraguayan Software Engineer ðŸ‡µðŸ‡¾, working with Python, Java, PostgreSQL, MySQL, Oracle, Django, React, JavaScript, FastAPI and more.</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Dec 2023 10:09:55 +0000</lastBuildDate>
    <item>
      <title>Building a Docker Image for a Django Application on Raspberry Pi</title>
      <link>/http://blasferna.com/articles/building-docker-image-django-application-raspberry-pi</link>
      <description>I installed my Django-based setlists app on Raspberry Pi 4, overcoming architecture challenges.</description>
      <content:encoded>&lt;p&gt;A few days ago, I decided to install my personal setlists creation application, available on &lt;a href="https://github.com/blasferna/songlib"&gt;GitHub&lt;/a&gt;, on my Raspberry Pi 4. While aware that I might face issues due to the difference in architecture for which the Docker image was built, I decided to take on this challenge to learn and understand the necessary steps to make it work.&lt;/p&gt;
&lt;h2&gt;Initial Exploration&lt;/h2&gt;
&lt;p&gt;The first thing I did was create my &lt;code&gt;docker-compose.yml&lt;/code&gt; file to easily rebuild the containers later:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: &amp;quot;3&amp;quot;

services:
  postgres:
    image: postgres:14.5
    ports:
      - 5432:5432
    container_name: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: postgres
    restart: unless-stopped

  songlib:
    image: ghcr.io/blasferna/songlib:v0.1
    container_name: songlib
    environment:
      - DEBUG=off
      - SECRET_KEY=secret
      - DB_NAME=songlib
      - DB_USER=postgres
      - DB_PASS=secret
      - DB_HOST=database
      - DB_PORT=5432
    ports:
      - 8080:80
    depends_on:
      - postgres
    restart: unless-stopped
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application requires a PostgreSQL database, so I also defined the &lt;code&gt;postgres&lt;/code&gt; service. The database worked correctly, but the &lt;code&gt;songlib&lt;/code&gt; service threw the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;exec /usr/bin/sh: exec format error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick search suggested that this error was due to the Docker image not being built for the &lt;code&gt;linux/arm64&lt;/code&gt; architecture used by the Raspberry Pi 4.&lt;/p&gt;
&lt;h2&gt;Docker Official Documentation&lt;/h2&gt;
&lt;p&gt;I decided to turn to the official Docker documentation, trusting that it would provide the correct steps to make a Docker image work on &lt;code&gt;linux/arm64&lt;/code&gt; architectures.&lt;/p&gt;
&lt;p&gt;In the official documentation, I found several strategies and opted for &lt;code&gt;Cross-compilation&lt;/code&gt;, which is essentially compiling for multiple platforms simultaneously. This process generates binaries compatible with various architectures, including &lt;code&gt;linux/arm64&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the official documentation, I found the following snippet from a &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;# syntax=docker/dockerfile:1
FROM --platform=$BUILDPLATFORM golang:alpine AS build
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo &amp;quot;I am running on $BUILDPLATFORM, building for $TARGETPLATFORM&amp;quot; &amp;gt; /log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used the relevant part of the example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;FROM --platform=$BUILDPLATFORM golang:alpine AS build
ARG TARGETPLATFORM
ARG BUILDPLATFORM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this portion of the example requires using &lt;code&gt;buildx&lt;/code&gt; to create images from now on. Since I use GitHub Actions to build the image, I had to adapt it to use &lt;code&gt;buildx&lt;/code&gt;. Locally, on my development machine, everything worked as expected.&lt;/p&gt;
&lt;p&gt;The time came to release the project image with the modifications, and I was surprised when I tried to run the image on the Raspberry Pi: &lt;code&gt;exec /usr/bin/sh: exec format error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Angry" src="https://github.com/blasferna/blasferna.com/assets/8385910/36a1b232-24cf-4dc6-b0d7-b98c6e6099b2" /&gt;&lt;/p&gt;
&lt;p&gt;I spent a couple of hours on the process and thought that using the official documentation would leave no room for error. I wondered, how is it possible that it works on my machine but not on the Raspberry Pi? Oh, right, my working environment runs on the &lt;code&gt;linux/amd64&lt;/code&gt; architecture!&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;After several hours of debugging and extensive testing, I realized that the &lt;code&gt;Dockerfile&lt;/code&gt; might contain an error. With confidence, I copied and pasted the necessary part from the official documentation. Could I have missed something in my excitement to find a solution?&lt;/p&gt;
&lt;p&gt;The key lies in the following line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;FROM --platform=$BUILDPLATFORM golang:alpine AS build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is no way to perform &lt;code&gt;Cross-compilation&lt;/code&gt; when importing the image for the architecture in which it is being built. That is, the base image will always be extended for &lt;code&gt;linux/amd64&lt;/code&gt; in this case. The correct approach in my case, following the example of &lt;code&gt;golang:alpine&lt;/code&gt;, would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;FROM --platform=$TARGETPLATFORM golang:alpine AS build
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Successful Implementation&lt;/h3&gt;
&lt;p&gt;Below, I detail the steps to build an image of a Django application that can run on Raspberry Pi 4. You can check the project that builds images for both &lt;code&gt;linux/amd64&lt;/code&gt; and &lt;code&gt;linux/arm64&lt;/code&gt; at &lt;a href="https://github.com/blasferna/songlib"&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Note that this is not a step-by-step guide, so I have omitted some details and obvious requirements, such as Docker installation, Django project creation, explanation of what a Dockerfile is, a docker-compose, GitHub Actions, etc.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;FROM --platform=$TARGETPLATFORM python:3.8.16-bullseye

ARG TARGETPLATFORM
ARG BUILDPLATFORM

RUN echo &amp;quot;I am running on $BUILDPLATFORM, building for $TARGETPLATFORM&amp;quot;

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

RUN mkdir -p /code

WORKDIR /code

COPY requirements.txt /tmp/requirements.txt
RUN set -ex &amp;amp;&amp;amp; \
    pip install --upgrade pip &amp;amp;&amp;amp; \
    pip install -r /tmp/requirements.txt &amp;amp;&amp;amp; \
    rm -rf /root/.cache/
COPY . /code

EXPOSE 80

RUN python manage.py collectstatic --no-input

CMD [&amp;quot;sh&amp;quot;, &amp;quot;./runserver.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;runserver.sh&lt;/code&gt; is not mandatory, but it's a way to automate some steps when starting the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;python manage.py migrate
python manage.py createadminuser
gunicorn --bind :80 --workers 2 songlib.wsgi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;publish.yml&lt;/code&gt;: This is the GitHub Action workflow that runs after creating a release. It builds and publishes the image to the GitHub registry.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;name: Publish a Docker image

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;: Finally, the definition that allows launching the image on both a Raspberry Pi and any distribution using &lt;code&gt;linux/amd64&lt;/code&gt;. Essentially, it is the same file presented at the beginning.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: &amp;quot;3&amp;quot;

services:
  postgres:
    image: postgres:14.5
    ports:
      - 5432:5432
    container_name: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: postgres
    restart: unless-stopped

  songlib:
    image: ghcr.io/blasferna/songlib:v0.3
    container_name: songlib
    environment:
      - DEBUG=off
      - SECRET_KEY=secret
      - DB_NAME=songlib
      - DB_USER=postgres
      - DB_PASS=secret
      - DB_HOST=database
      - DB_PORT=5432
    ports:
      - 8080:80
    depends_on:
      - postgres
    restart: unless-stopped
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
      <guid isPermaLink="false">/http://blasferna.com/articles/building-docker-image-django-application-raspberry-pi</guid>
      <category>django</category>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Markdown test</title>
      <link>/http://blasferna.com/articles/markdown-generation-test</link>
      <description>This is a test blog entry to verify the generation of HTML from Markdown for all the entries on my blog.</description>
      <content:encoded>&lt;p&gt;This is a test blog entry to verify the generation of HTML from Markdown for all the entries on my blog. I'm conducting this experiment to ensure that the Markdown to HTML conversion process works correctly.&lt;/p&gt;
&lt;p&gt;Markdown is a simple and efficient markup language that allows me to write content quickly and easily. With its intuitive structure, I can add headers, lists, links, and even images to my blog entries in a practical way.&lt;/p&gt;
&lt;p&gt;By generating HTML from Markdown, I can ensure that my blog entries are properly formatted and easy to read on the web. Additionally, this will save me time and effort when writing and publishing new entries.&lt;/p&gt;
&lt;h1&gt;Heading 1&lt;/h1&gt;
&lt;h2&gt;Heading 2&lt;/h2&gt;
&lt;h3&gt;Heading 3&lt;/h3&gt;
&lt;h4&gt;Heading 4&lt;/h4&gt;
&lt;h5&gt;Heading 5&lt;/h5&gt;
&lt;h6&gt;Heading 6&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;Bold text&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Italic text&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;~~Strikethrough~~&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Italic text&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bold text&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blockquote&lt;/p&gt;
&lt;p&gt;Another line of the blockquote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Ordered list item 1&lt;/li&gt;
&lt;li&gt;Ordered list item 2&lt;/li&gt;
&lt;li&gt;Nested ordered list item 2.1&lt;/li&gt;
&lt;li&gt;Nested ordered list item 2.2&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ordered list item 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unordered list item 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Unordered list item 2&lt;/li&gt;
&lt;li&gt;Nested unordered list item 2.1&lt;/li&gt;
&lt;li&gt;Nested unordered list item 2.2&lt;/li&gt;
&lt;li&gt;Unordered list item 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://www.google.com"&gt;Link to Google&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text for an image" src="https://via.placeholder.com/150" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inline code&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;# Code block with syntax highlighting
def hello_world():
    print(&amp;quot;Hello, world!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Tables&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column 1&lt;/th&gt;
&lt;th&gt;Column 2&lt;/th&gt;
&lt;th&gt;Column 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Row 1, Cell 1&lt;/td&gt;
&lt;td&gt;Row 1, Cell 2&lt;/td&gt;
&lt;td&gt;Row 1, Cell 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Row 2, Cell 1&lt;/td&gt;
&lt;td&gt;Row 2, Cell 2&lt;/td&gt;
&lt;td&gt;Row 2, Cell 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Row 3, Cell 1&lt;/td&gt;
&lt;td&gt;Row 3, Cell 2&lt;/td&gt;
&lt;td&gt;Row 3, Cell 3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Horizontal rules&lt;/h3&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;</content:encoded>
      <guid isPermaLink="false">/http://blasferna.com/articles/markdown-generation-test</guid>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Automatically convert a website to dark mode</title>
      <link>/http://blasferna.com/articles/automatically-convert-a-website-to-dark-mode</link>
      <description>A few days ago I had the need to apply the dark mode to a website and I didn't want to spend a lot of time in the conversion process, so I started looking for a utility to facilitate the process, luckily I found Darkreader.</description>
      <content:encoded>&lt;p&gt;&lt;img alt="Screenshot" src="https://user-images.githubusercontent.com/8385910/173192842-488c18b5-16e9-42bd-8af8-f296502385dc.png" /&gt;&lt;/p&gt;
&lt;p&gt;A few days ago I had the need to apply the dark mode to a website and I didn't want to spend a lot of time in the conversion process, so I started looking for a utility to facilitate the process, luckily I found &lt;a href="https://github.com/darkreader/darkreader"&gt;Darkreader&lt;/a&gt; an open source browser plugin that automatically applies dark mode.&lt;/p&gt;
&lt;p&gt;Inquiring into the functionalities it offers, I found that it can be applied to a website using it as a javascript library, directly from a CDN or installed from NPM.&lt;/p&gt;
&lt;p&gt;Today I bring a guide on how to apply it using its CDN version.&lt;/p&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/darkreader/darkreader"&gt;Darkreader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Converting to dark mode&lt;/h2&gt;
&lt;p&gt;Add the dependency in the head of the HTML&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/darkreader@4.9.46/darkreader.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the toggle button to apply dark mode&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;dark-switch&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the mode change to be persistent, it is necessary to store the user's preference in the browser's Local Storage.&lt;/p&gt;
&lt;p&gt;Get user preference from Local Storage.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;  const getCurrentMode = function () {
    let mode = localStorage.getItem(&amp;quot;mode&amp;quot;);
    if (!mode) {
      mode = &amp;quot;light&amp;quot;;
    }
    return mode;
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Function to change the mode according to the preference stored in the browser.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;  const changeMode = function (toggler) {
    let mode = getCurrentMode();
    if (toggler) {
      toggler.checked = mode === &amp;quot;dark&amp;quot;;
    }
    if (mode === &amp;quot;dark&amp;quot;) {
      DarkReader.setFetchMethod(window.fetch);
      DarkReader.enable({
        brightness: 100,
        contrast: 90,
        sepia: 10,
      });
    } else {
      DarkReader.disable();
    }
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following function allows the toggler to be configured to apply the user's preference based on change events.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt; const configure = function () {
    const darkSwitch = document.getElementById(&amp;quot;dark-switch&amp;quot;);
    if (darkSwitch) {
      darkSwitch.addEventListener(&amp;quot;change&amp;quot;, function (e) {
        if (darkSwitch.checked) {
          localStorage.setItem(&amp;quot;mode&amp;quot;, &amp;quot;dark&amp;quot;);
        } else {
          localStorage.setItem(&amp;quot;mode&amp;quot;, &amp;quot;light&amp;quot;);
        }
        changeMode(darkSwitch);
      });
    }
    changeMode(darkSwitch);
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following block of code allows the change to be applied safely without the user feeling the screen flicker when the library is making the change.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;  function ready(fn) {
    if (document.readyState !== &amp;quot;loading&amp;quot;) {
      fn();
    } else {
      document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, fn);
    }
  }

  ready(function () {
    configure();
  });

  changeMode();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a &lt;code&gt;dark_mode.js&lt;/code&gt; file to include all the code explained above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;(function () {
  const getCurrentMode = function () {
    let mode = localStorage.getItem(&amp;quot;mode&amp;quot;);
    if (!mode) {
      mode = &amp;quot;light&amp;quot;;
    }
    return mode;
  };

  const changeMode = function (toggler) {
    let mode = getCurrentMode();
    if (toggler) {
      toggler.checked = mode === &amp;quot;dark&amp;quot;;
    }
    if (mode === &amp;quot;dark&amp;quot;) {
      DarkReader.setFetchMethod(window.fetch);
      DarkReader.enable({
        brightness: 100,
        contrast: 90,
        sepia: 10,
      });
    } else {
      DarkReader.disable();
    }
  };

  const configure = function () {
    const darkSwitch = document.getElementById(&amp;quot;dark-switch&amp;quot;);
    if (darkSwitch) {
      darkSwitch.addEventListener(&amp;quot;change&amp;quot;, function (e) {
        if (darkSwitch.checked) {
          localStorage.setItem(&amp;quot;mode&amp;quot;, &amp;quot;dark&amp;quot;);
        } else {
          localStorage.setItem(&amp;quot;mode&amp;quot;, &amp;quot;light&amp;quot;);
        }
        changeMode(darkSwitch);
      });
    }
    changeMode(darkSwitch);
  };

  function ready(fn) {
    if (document.readyState !== &amp;quot;loading&amp;quot;) {
      fn();
    } else {
      document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, fn);
    }
  }

  ready(function () {
    configure();
  });

  changeMode();
})();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally add the &lt;code&gt;dark_mode.js&lt;/code&gt; in the HTML head block.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;  src=&amp;quot;./dark_mode.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;You can see the code in action by accessing the following link &lt;a href="https://blasferna.github.io/auto-dark-mode/"&gt;https://blasferna.github.io/auto-dark-mode/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Source&lt;/h3&gt;
&lt;p&gt;The demo page source code is available on &lt;a href="https://github.com/blasferna/auto-dark-mode"&gt;Github&lt;/a&gt; with more details on how to apply it to a web site.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">/http://blasferna.com/articles/automatically-convert-a-website-to-dark-mode</guid>
      <category>javascript</category>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Make simple calculations in Django forms using django-calculation</title>
      <link>/http://blasferna.com/articles/django-calculation</link>
      <description>This application provides a Django widget that retrieves its value from an expression defined in the widget instance.</description>
      <content:encoded>&lt;p&gt;Make simple calculations in your Django forms using django-calculation.&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;The application offers a series of Widgets that allow you to specify mathematical expressions and/or calls to JavaScript functions.&lt;/p&gt;
&lt;p&gt;A basic example would be performing a multiplication to calculate the total price of a sales record.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;amount = forms.DecimalField( 
    widget=calculation.FormulaInput('quantity*price')  
) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At runtime, the expression &lt;code&gt;quantity*price&lt;/code&gt; is replaced by the values â€‹â€‹corresponding to the fields of the same name present in the form.&lt;/p&gt;
&lt;p&gt;It currently supports formula-type expressions, as well as addition operations, average calculations, finding the minimum value, maximum value, and record counting.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;To be honest, Iâ€™m too lazy to write JavaScript code in templates that have forms that require some kind of mathematical calculation. In a medium or large project the need can be several hundred or thousands of lines of code.&lt;/p&gt;
&lt;p&gt;As I donâ€™t have the need to implement advanced frontend libraries, such as React, Vue or other available since Djangoâ€™s MTV adapts quite well to the projects I participate in. Looking for a way to avoid writing JavaScript code for those situations, I decided to try something similar to what Salesforce offers with FormulaField, but in this case something much more practical focused on what I needed.&lt;/p&gt;
&lt;p&gt;For several years I have been a user of Oracle Forms 6i, which had something very practical: Indicate that the content of a text box be generated from the execution of a formula and something very interesting happened when you referenced another text box of the same type , the execution respected the dependency of the content of the formula, that is, it was executed in cascade.&lt;/p&gt;
&lt;p&gt;With all that in mind I started the development.&lt;/p&gt;
&lt;h2&gt;Development process&lt;/h2&gt;
&lt;p&gt;The idea is quite simple, in theory, to execute the expressions indicated in the definition of the text field in a Django form, respecting the references they may have in other expressions of the same context. Activate them when the source fields are modified.&lt;/p&gt;
&lt;h2&gt;Functional flow&lt;/h2&gt;
&lt;p&gt;After thinking about the flow for several days, I came to the conclusion that it could work as follows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find Formulated Fields:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first thing would be to identify the fields that contain formulas, I decided to apply the search according to the &lt;code&gt;data-calculation&lt;/code&gt; attribute.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find dependencies:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, find all the fields referenced in the formulas, to do this he had to go through all the formulated fields and analyze each of the formulas.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Determine the order of execution:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To determine the execution order I had to use an algorithm that consists of giving a weight to each formulated field based on the number of times it was referenced, the more times it is referenced, the greater its weight would be and therefore its execution would be after considered fields lighter.&lt;/p&gt;
&lt;p&gt;Code used to calculate the weight of the fields&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;function calculateWeight(obj, weight = 0) {
    weight++;
    for (let index = 0; index &amp;lt; obj.dependencies.length; index++) {
        let o = obj.dependencies[index];
        weight = calculateWeight(o, weight);
    }
    return weight;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code to order the execution&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;function sortExecution() {
    for (let index = 0; index &amp;lt; calculatedFields.length; index++) {
        let obj = calculatedFields[index];
        obj.weight = calculateWeight(obj);
    }
    calculatedFields.sort(function (a, b) {
        return a.weight - b.weight;
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Find source fields:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then I had to find those fields that are going to execute the calculations, that is, the source fields, those that, when they undergo changes, will execute the calculations in the places where they have been referenced.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add events:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having the source fields, all that remains is to add the event that would trigger the executions, I decided to use the &lt;code&gt;blur&lt;/code&gt; event because it is triggered after losing the focus.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pip install django-calculation 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add &lt;code&gt;calculation&lt;/code&gt; in INSTALLED_APPS&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;INSTALLED_APPS = [
    ...
    'calculation',
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Import &lt;code&gt;calculation&lt;/code&gt; and complete the definition.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;FormulaInput&lt;/code&gt; widget&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;from django import forms

import calculation


class TestForm(forms.Form):
    quantity = forms.DecimalField()
    price = forms.DecimalField()
    amount = forms.DecimalField(
        widget=calculation.FormulaInput('quantity*price') # &amp;lt;- using single math expression
    )
    apply_taxes = forms.BooleanField(initial=True)
    tax = forms.DecimalField(
        # using math expression and javascript functions.
        widget=calculation.FormulaInput('apply_taxes ? parseFloat(amount/11).toFixed(2) : 0.0') 
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;django-calculation&lt;/code&gt; works with static files and therefore it is necessary to include the media of the form in the template file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-django"&gt;&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;
    {% csrf_token %}
    {{ form }}
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In action:&lt;/p&gt;
&lt;p&gt;&lt;img alt="calculation" src="https://user-images.githubusercontent.com/8385910/142947517-49a5d6a0-6a6c-41d6-8f14-a140ad44fa1e.gif" /&gt;&lt;/p&gt;
&lt;h2&gt;Open Source&lt;/h2&gt;
&lt;p&gt;I was using it for several weeks adjusting some details and after a while I decided to release the project with the hope that it will be useful for other people since for me it is very practical.&lt;/p&gt;
&lt;p&gt;For that I had to apply some improvements such as including it in the Python &lt;code&gt;PyPI&lt;/code&gt; package manager.&lt;/p&gt;
&lt;h3&gt;Repercussion&lt;/h3&gt;
&lt;p&gt;It wasn't long after the first release that I received some emails from users asking about some details of the library, that was exciting.&lt;/p&gt;
&lt;h3&gt;Contribute&lt;/h3&gt;
&lt;p&gt;If you have any ideas on how to improve the library or found some bugs, feel free to open an issue at &lt;a href="https://github.com/blasferna/django-calculation/issues"&gt;https://github.com/blasferna/django-calculation/issues&lt;/a&gt;. &lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">/http://blasferna.com/articles/django-calculation</guid>
      <category>django</category>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>My First Post</title>
      <link>/http://blasferna.com/articles/my-first-post</link>
      <description>Welcome to my blog! This is my first post, and I'm excited to share my thoughts and experiences with you.</description>
      <content:encoded>&lt;p&gt;Welcome to my blog! This is my first post, and I'm excited to share my thoughts and experiences with you.&lt;/p&gt;
&lt;h2&gt;Why I Started Blogging&lt;/h2&gt;
&lt;p&gt;I believe that sharing my ideas and experiences can help others learn and grow as well.&lt;/p&gt;
&lt;h2&gt;What to Expect&lt;/h2&gt;
&lt;p&gt;In this blog, I plan to cover various topics, such as technology, personal development, travel, and more.&lt;/p&gt;</content:encoded>
      <guid isPermaLink="false">/http://blasferna.com/articles/my-first-post</guid>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
